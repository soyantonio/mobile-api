openapi: 3.0.1
info:
  title: Driver Assistant
  description: |
    <p>
    Driver Assistant REST API, all your devices from a single endpoint. For this sample, you can use a token <code>bearerAuth</code> to test the authorization filters. Feel free to change the enpoint to a local server.
    </p>
    <p>
    All the optional properties are ignored in the creation or modification process. They are only for read purposes, ignore them when calling an enpoint. This type of properties start with an underscore <code>_</code>
    </p>

  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: 0.1.0
servers:
- url: https://us-central1-devices-mobile-project.cloudfunctions.net/api/v0
- url: http://localhost:5001/devices-mobile-project/us-central1/api/v0
tags:
- name: device
  description: Everything about your devices
- name: user
  description: Operations about user
paths:
  /device:
    post:
      tags:
      - device
      summary: Add a new device to the system
      operationId: addDevice
      requestBody:
        description: Device object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []
  /device/{deviceId}:
    get:
      tags:
      - device
      summary: Find device by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Car not found
          content: {}
      security:
      - bearerAuth: []
    post:
      tags:
      - device
      summary: Updates a device in the store with form data
      operationId: updateDeviceWithForm
      parameters:
      - name: deviceId
        in: path
        description: ID of device that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - device
      summary: Deletes a device
      operationId: deleteDevice
      parameters:
      - name: deviceId
        in: path
        description: Device id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
  /user/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: Invalid username/password supplied
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Device:
      required:
      - name
      - bluetoothAddress
      - variant
      type: object
      properties:
        _id:
          type: string
          format: uuid
        _createdBy:
          type: string
          example: CLyna5Uk45DkIA333oWkBrin7FU2
          description: User UID from Firebase
        name:
          type: string
          example: superDevice
        bluetoothAddress:
          type: string
          example: 30:EC:5A:B0:02:00
        variant:
          type: string
          description: Device type
          enum:
          - console
          - car
    DeviceLocation:
      required:
        - latitude
        - longitude
      type: object
      properties:
        latitude:
          type: number
          format: double
          example: 18.959547
        longitude:
          type: number
          format: double
          example: -99.2193468
    DeviceStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: superDevice
        photoUrls:
          type: array
          items:
            type: string
        status:
          type: string
          description: car status
          enum:
          - online
          - offline
    Token:
      type: object
      properties:
        token:
          type: string
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string          
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
