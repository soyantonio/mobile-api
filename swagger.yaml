openapi: 3.0.1
info:
  title: Driver Assistant
  description: |
    <p>
    Driver Assistant REST API, all your devices from a single endpoint. For this sample, you can use a token <code>bearerAuth</code> to test the authorization filters. Feel free to change the enpoint to a local server.
    </p>
    <p>
    All the optional properties are ignored in the creation or modification process. They are only for read purposes, ignore them when calling an enpoint. This type of properties start with an underscore <code>_</code>
    </p>

  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: 0.1.0
servers:
- url: https://us-central1-devices-mobile-project.cloudfunctions.net/api/v0
- url: http://localhost:5001/devices-mobile-project/us-central1/api/v0
tags:
- name: device
  description: Everything about your devices
- name: user
  description: Operations about user
paths:
  /devices:
    get:
      tags:
      - device
      summary: List devices of the user
      operationId: listDevices
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
      security:
      - bearerAuth: []                  
    post:
      tags:
      - device
      summary: Add a new device to the system
      operationId: addDevice
      requestBody:
        description: Device object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}:
    get:
      tags:
      - device
      summary: Find device by ID
      description: Returns a single device
      operationId: getDeviceById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
    put:
      tags:
      - device
      summary: Update a device
      operationId: updateDeviceWithForm
      parameters:
      - name: deviceId
        in: path
        description: ID of device that needs to be updated
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []
    delete:
      tags:
      - device
      summary: Delete a device
      operationId: deleteDevice
      parameters:
      - name: deviceId
        in: path
        description: Device id to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}/locations:
    post:
      tags:
      - device
      summary: Add a new device location
      operationId: createDeviceLocation
      parameters:
      - name: deviceId
        in: path
        description: ID of device that the location will be inserted
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceLocation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceLocation'
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []
    get:
      tags:
      - device
      summary: List all device locations by ID
      description: Returns all GPS locations of the device
      operationId: getDeviceLocationsById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceLocation'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}/locations/last:
    get:
      tags:
      - device
      summary: Find last device location by ID
      description: Returns last GPS location of the device
      operationId: getLastDeviceLocationById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceLocation'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}/commands:
    post:
      tags:
      - device
      summary: Add a new device command only if the device is online
      operationId: createDeviceCommand
      parameters:
      - name: deviceId
        in: path
        description: ID of device that the command will be send
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCommand'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []  
    get:
      tags:
      - device
      summary: List all commands of device by ID
      description: Returns all commands of the device, all the commands with `_isFirstRead=true` has not been dispatched by the pop endpoint
      operationId: getDeviceCommandsById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceCommand'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}/commands/pop:
    get:
      tags:
      - device
      summary: Pop last device command
      description: Get last device command and increase the pointer to the next element
      operationId: popLastDeviceCommandId
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCommand'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []
  /devices/{deviceId}/status:
    post:
      tags:
      - device
      summary: Add a new device status
      operationId: createDeviceStatus
      parameters:
      - name: deviceId
        in: path
        description: ID of device that the status will be inserted
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceStatus'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceStatus'
        405:
          description: Invalid input
          content: {}
      security:
      - bearerAuth: []
    get:
      tags:
      - device
      summary: List all device status by ID
      description: Return all status of the device
      operationId: getDeviceStatusById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceStatus'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []      
  /devices/{deviceId}/status/last:
    get:
      tags:
      - device
      summary: Find last device status by ID
      description: Return last status of the device
      operationId: getLastDeviceStatusById
      parameters:
      - name: deviceId
        in: path
        description: ID of device to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceStatus'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
      security:
      - bearerAuth: []      
  /users/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /users/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: Invalid username/password supplied
          content: {}
  /users/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Device:
      required:
      - name
      - bluetoothAddress
      - variant
      type: object
      properties:
        _id:
          type: string
          format: uuid
        _createdBy:
          type: string
          example: CLyna5Uk45DkIA333oWkBrin7FU2
          description: User UID from Firebase
        name:
          type: string
          example: superDevice
        bluetoothAddress:
          type: string
          example: 30:EC:5A:B0:02:00
        variant:
          type: string
          description: Device type
          enum:
          - console
          - car
    DeviceLocation:
      required:
        - latitude
        - longitude
      type: object
      properties:
        _id:
          type: string
          format: uuid
        _createdAt:
          type: string
          format: date-time
        _deviceId:
          type: string
          format: uuid 
        latitude:
          type: number
          format: double
          example: 18.959547
        longitude:
          type: number
          format: double
          example: -99.2193468
    DeviceCommand:
      required:
        - payload
        - payloadType
      type: object
      properties:
        _id:
          type: string
          format: uuid
        _createdAt:
          type: string
          format: date-time
        _deviceId:
          type: string
          format: uuid
        _isFirstRead:
          type: boolean
          example: true
        payload:
          type: string
          example: '{"right": 0, "left": 1, "top": 1, "bottom": 0 }'
        payloadType:
          type: string
          enum:
          - userDefined
          - joystick
    DeviceStatus:
      type: object
      required:
        - status
      properties:
        _id:
          type: string
          format: uuid
        _createdAt:
          type: string
          format: date-time
        _deviceId:
          type: string
          format: uuid
        status:
          type: string
          description: car status
          enum:
          - online
          - offline
    Token:
      type: object
      properties:
        token:
          type: string
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string          
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
